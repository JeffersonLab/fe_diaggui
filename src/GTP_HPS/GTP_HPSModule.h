#ifndef GTP_HPSModule_H
#define GTP_HPSModule_H

#include "RootHeader.h"
#include "GTP_HPS_SerialScope.h"
#include "GTP_HPS_FiberSerialScope.h"
#include "GTP_HPSStatus.h"
#include "ModuleFrame.h"
#include "gtp.h"

class GTP_HPSModule	: public ModuleFrame
{
public:
	GTP_HPSModule(const TGWindow *p, CrateMsgClient *pClient, unsigned int baseAddr) : ModuleFrame(p, pClient, baseAddr)
	{
		SetupRegisters();

		TGCompositeFrame *tFrame;
		AddFrame(pGTPTabs = new TGTab(this), new TGLayoutHints(kLHintsBottom | kLHintsRight | kLHintsExpandX | kLHintsExpandY));

		tFrame = pGTPTabs->AddTab("Status");	tFrame->AddFrame(new GTP_HPSStatus(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("QSFP");		tFrame->AddFrame(new GTP_HPS_FiberSerialScope(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP1");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 0), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP2");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 1), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP3");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 2), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP4");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 3), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP5");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 4), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP6");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 5), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP7");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 6), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP8");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 7), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP9");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 8), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP10");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 9), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP11");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 10), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP12");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 11), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP13");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 12), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP14");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 13), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP15");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 14), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		tFrame = pGTPTabs->AddTab("PP16");		tFrame->AddFrame(new GTP_HPS_SerialScope(tFrame, this, 15), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		
		// serializer status page (ch up/down, lane up/down, latency, rxrdy, rxerror, crc status,...?)
		// delay curve sweeps
		strSlotIdentifier.Form("SWA");
	}

	void SetupRegisters()
	{
#define GTP_SDIOMUX_NAME_MAP		{\
											43,\
											{"0","1","SYNC","TRIG1","TRIG2","FPIN0","FPIN1","FPIN2","FPIN3","PULSER","BUSY","TRIGBIT0","TRIGBIT1","TRIGBIT2","TRIGBIT3","TRIGBIT4","TRIGBIT5","TRIGBIT6","TRIGBIT7","TRIGBIT8","TRIGBIT9","TRIGBIT10","TRIGBIT11","TRIGBIT12","TRIGBIT13","TRIGBIT14","TRIGBIT15","TRIGBIT16","TRIGBIT17","TRIGBIT18","TRIGBIT19","TRIGBIT20","TRIGBIT21","TRIGBIT22","TRIGBIT23","TRIGBIT24","TRIGBIT25","TRIGBIT26","TRIGBIT27","TRIGBIT28","TRIGBIT29","TRIGBIT30","TRIGBIT31"},\
											{0,1,2,3,4,5,6,7,8,9,10,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63}\
										}

		static RegMemDesc regs[] = {
			{"Clk", 0},
				{"GClkSource",					REGMEM_DESC_FLAGS_STRING,	{0x0100, 0, 2, 32},	{2,{"VXS","LOCAL"},{1,2}}},
				{"GtpLinkPllReset",			REGMEM_DESC_FLAGS_UINT,		{0x0100, 30, 1, 32}},
				{"GClkPllReset",				REGMEM_DESC_FLAGS_UINT,		{0x0100, 31, 1, 32}},
				{"GClkPllLocked",				REGMEM_DESC_FLAGS_UINT,		{0x0104, 0, 1, 32}},
				{"ATXClkLPllLocked",			REGMEM_DESC_FLAGS_UINT,		{0x0104, 1, 1, 32}},
				{"ATXClkRPllLocked",			REGMEM_DESC_FLAGS_UINT,		{0x0104, 2, 1, 32}},
			{NULL, 0},
			{"TiGtpLink", 0},
				{"SendBlReq",					REGMEM_DESC_FLAGS_UINT,		{0x2500, 0, 1, 32}},
				{"SendAck",						REGMEM_DESC_FLAGS_UINT,		{0x2500, 1, 1, 32}},
				{"TestIrq",						REGMEM_DESC_FLAGS_UINT,		{0x2500, 2, 1, 32}},
				{"RxErrors",					REGMEM_DESC_FLAGS_UINT,		{0x2504, 0, 16, 32}},
				{"RxReady",						REGMEM_DESC_FLAGS_UINT,		{0x2504, 16, 1, 32}},
				{"RxLocked",					REGMEM_DESC_FLAGS_UINT,		{0x2504, 17, 1, 32}},
				{"RxReset",						REGMEM_DESC_FLAGS_UINT,		{0x2508, 0, 1, 32}},
				{"PllReset",					REGMEM_DESC_FLAGS_UINT,		{0x2508, 1, 1, 32}},
				{"RxFifoReset",				REGMEM_DESC_FLAGS_UINT,		{0x2508, 2, 1, 32}},
				{"FifoReset",					REGMEM_DESC_FLAGS_UINT,		{0x2510, 0, 1, 32}},
				{"FifoDataStatus",			REGMEM_DESC_FLAGS_UINT,		{0x2514, 0, 8, 32}},
				{"FifoLenStatus",				REGMEM_DESC_FLAGS_UINT,		{0x251C, 0, 8, 32}},
			{NULL, 0},
			{"Sd", 0},
				{"Scalers", 0},
					{"Disable",					REGMEM_DESC_FLAGS_UINT,		{0x0200, 0, 1, 32}},
					{"SysClk50",				REGMEM_DESC_FLAGS_UINT,		{0x0204, 0, 32, 32}},
					{"GClk250",					REGMEM_DESC_FLAGS_UINT,		{0x0208, 0, 32, 32}},
					{"Sync",						REGMEM_DESC_FLAGS_UINT,		{0x020C, 0, 32, 32}},
					{"Trig1",					REGMEM_DESC_FLAGS_UINT,		{0x0210, 0, 32, 32}},
					{"Trig2",					REGMEM_DESC_FLAGS_UINT,		{0x0214, 0, 32, 32}},
					{"Busy",						REGMEM_DESC_FLAGS_UINT,		{0x0218, 0, 32, 32}},
					{"BusyCycles",				REGMEM_DESC_FLAGS_UINT,		{0x021C, 0, 32, 32}},
					{"FpIn0",					REGMEM_DESC_FLAGS_UINT,		{0x0220, 0, 32, 32}},
					{"FpIn1",					REGMEM_DESC_FLAGS_UINT,		{0x0224, 0, 32, 32}},
					{"FpIn2",					REGMEM_DESC_FLAGS_UINT,		{0x0228, 0, 32, 32}},
					{"FpIn3",					REGMEM_DESC_FLAGS_UINT,		{0x022C, 0, 32, 32}},
					{"FpOut0",					REGMEM_DESC_FLAGS_UINT,		{0x0230, 0, 32, 32}},
					{"FpOut1",					REGMEM_DESC_FLAGS_UINT,		{0x0234, 0, 32, 32}},
					{"FpOut2",					REGMEM_DESC_FLAGS_UINT,		{0x0238, 0, 32, 32}},
					{"FpOut3",					REGMEM_DESC_FLAGS_UINT,		{0x023C, 0, 32, 32}},
				{NULL, 0},
				{"Pulser", 0},
					{"Period",					REGMEM_DESC_FLAGS_UINT,		{0x0300, 0, 32, 32}},
					{"LowCycles",				REGMEM_DESC_FLAGS_UINT,		{0x0304, 0, 32, 32}},
					{"NPulses",					REGMEM_DESC_FLAGS_UINT,		{0x0308, 0, 32, 32}},
					{"Done",						REGMEM_DESC_FLAGS_UINT,		{0x030C, 0, 32, 32}},
					{"Start",					REGMEM_DESC_FLAGS_UINT,		{0x0310, 0, 0, 32}},
				{NULL, 0},
				{"I/O Muxing", 0},
					{"Trig",						REGMEM_DESC_FLAGS_STRING,	{0x0320, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
					{"Sync",						REGMEM_DESC_FLAGS_STRING,	{0x0324, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
					{"FpOut0",					REGMEM_DESC_FLAGS_STRING,	{0x0328, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
					{"FpOut1",					REGMEM_DESC_FLAGS_STRING,	{0x032C, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
					{"FpOut2",					REGMEM_DESC_FLAGS_STRING,	{0x0330, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
					{"FpOut3",					REGMEM_DESC_FLAGS_STRING,	{0x0334, 0, 6, 32},	GTP_SDIOMUX_NAME_MAP},
				{NULL, 0},
			{NULL, 0},
			{"GxbCfgOdd", 0},
				{"AnalogControls", 0},
					{"LogicalAddr",			REGMEM_DESC_FLAGS_UINT,		{0x0504, 0, 7, 32}},
					{"RxEqCtrlWr",				REGMEM_DESC_FLAGS_UINT,		{0x050C, 0, 4, 32}},
					{"RxEqDCGainWr",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 4, 3, 32}},
					{"TxPreEmp0Wr",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 7, 5, 32}},
					{"TxPreEmp1Wr",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 12, 5, 32}},
					{"TxPreEmp2Wr",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 17, 5, 32}},
					{"TxVODCtrlWr",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 22, 3, 32}},
					{"RxEqCtrlRd",				REGMEM_DESC_FLAGS_UINT,		{0x050C, 0, 4, 32}},
					{"RxEqDCGainRd",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 4, 3, 32}},
					{"TxPreEmp0Rd",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 7, 5, 32}},
					{"TxPreEmp1Rd",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 12, 5, 32}},
					{"TxPreEmp2Rd",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 17, 5, 32}},
					{"TxVODCtrlRd",			REGMEM_DESC_FLAGS_UINT,		{0x050C, 22, 3, 32}},
				{NULL, 0},
				{"DigitalControls", 0},
					{"ModeSelect",				REGMEM_DESC_FLAGS_UINT,		{0x0504, 7, 4, 32}},
					{"CtrlRead",				REGMEM_DESC_FLAGS_UINT,		{0x0504, 13, 1, 32}},
					{"CtrlWrite",				REGMEM_DESC_FLAGS_UINT,		{0x0504, 15, 1, 32}},
					{"CtrlAddress",			REGMEM_DESC_FLAGS_UINT,		{0x0508, 0, 16, 32}},
					{"CtrlReadData",			REGMEM_DESC_FLAGS_UINT,		{0x0500, 0, 16, 32}},
					{"CtrlWriteData",			REGMEM_DESC_FLAGS_UINT,		{0x0508, 16, 16, 32}},
				{NULL, 0},
				{"Busy",							REGMEM_DESC_FLAGS_UINT,		{0x0500, 16, 1, 32}},
				{"DataValid",					REGMEM_DESC_FLAGS_UINT,		{0x0500, 17, 1, 32}},
				{"Error",						REGMEM_DESC_FLAGS_UINT,		{0x0500, 18, 1, 32}},
				{"Read",							REGMEM_DESC_FLAGS_UINT,		{0x0504, 11, 1, 32}},
				{"WriteAll",					REGMEM_DESC_FLAGS_UINT,		{0x0504, 12, 1, 32}},
				{"PowerDown",					REGMEM_DESC_FLAGS_UINT,		{0x0504, 15, 1, 32}},
			{NULL, 0},
			{"GxbCfgEven", 0},
				{"AnalogControls", 0},
					{"LogicalAddr",			REGMEM_DESC_FLAGS_UINT,		{0x0604, 0, 7, 32}},
					{"RxEqCtrlWr",				REGMEM_DESC_FLAGS_UINT,		{0x060C, 0, 4, 32}},
					{"RxEqDCGainWr",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 4, 3, 32}},
					{"TxPreEmp0Wr",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 7, 5, 32}},
					{"TxPreEmp1Wr",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 12, 5, 32}},
					{"TxPreEmp2Wr",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 17, 5, 32}},
					{"TxVODCtrlWr",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 22, 3, 32}},
					{"RxEqCtrlRd",				REGMEM_DESC_FLAGS_UINT,		{0x060C, 0, 4, 32}},
					{"RxEqDCGainRd",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 4, 3, 32}},
					{"TxPreEmp0Rd",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 7, 5, 32}},
					{"TxPreEmp1Rd",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 12, 5, 32}},
					{"TxPreEmp2Rd",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 17, 5, 32}},
					{"TxVODCtrlRd",			REGMEM_DESC_FLAGS_UINT,		{0x060C, 22, 3, 32}},
				{NULL, 0},
				{"DigitalControls", 0},
					{"ModeSelect",				REGMEM_DESC_FLAGS_UINT,		{0x0604, 7, 4, 32}},
					{"CtrlRead",				REGMEM_DESC_FLAGS_UINT,		{0x0604, 13, 1, 32}},
					{"CtrlWrite",				REGMEM_DESC_FLAGS_UINT,		{0x0604, 15, 1, 32}},
					{"CtrlAddress",			REGMEM_DESC_FLAGS_UINT,		{0x0608, 0, 16, 32}},
					{"CtrlReadData",			REGMEM_DESC_FLAGS_UINT,		{0x0600, 0, 16, 32}},
					{"CtrlWriteData",			REGMEM_DESC_FLAGS_UINT,		{0x0608, 16, 16, 32}},
				{NULL, 0},
				{"Busy",							REGMEM_DESC_FLAGS_UINT,		{0x0600, 16, 1, 32}},
				{"DataValid",					REGMEM_DESC_FLAGS_UINT,		{0x0600, 17, 1, 32}},
				{"Error",						REGMEM_DESC_FLAGS_UINT,		{0x0600, 18, 1, 32}},
				{"Read",							REGMEM_DESC_FLAGS_UINT,		{0x0604, 11, 1, 32}},
				{"WriteAll",					REGMEM_DESC_FLAGS_UINT,		{0x0604, 12, 1, 32}},
				{"PowerDown",					REGMEM_DESC_FLAGS_UINT,		{0x0604, 15, 1, 32}},
			{NULL, 0},
			{"SerDes", 0},
				{"QSFP", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x2400, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x2400, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x2400, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x2418, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x2418, 16, 16, 32}},
					{"BitErrCnt2",				REGMEM_DESC_FLAGS_UINT,		{0x241C, 0, 16, 32}},
					{"BitErrCnt3",				REGMEM_DESC_FLAGS_UINT,		{0x241C, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 1, 1, 32}},
					{"HardErr2",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 2, 1, 32}},
					{"HardErr3",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 3, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x2410, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x2410, 5, 1, 32}},
					{"LaneUp2",					REGMEM_DESC_FLAGS_UINT,		{0x2410, 6, 1, 32}},
					{"LaneUp3",					REGMEM_DESC_FLAGS_UINT,		{0x2410, 7, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x2410, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x2410, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x241C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x241C, 16, 2, 32}},
				{NULL, 0},
				{"PP15(Slot3)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1E00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1E00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1E00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1E18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1E18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1E10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1E10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1E10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1E10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1E10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1E10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1E10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1E1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1E1C, 16, 2, 32}},
				{NULL, 0},
				{"PP13(Slot4)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1C00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1C00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1C00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1C18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1C18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1C10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1C10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1C10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1C10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1C10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1C10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1C10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1C1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1C1C, 16, 2, 32}},
				{NULL, 0},
				{"PP11(Slot5)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1A00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1A00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1A00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1A18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1A18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1A10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1A10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1A10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1A10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1A10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1A10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1A10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1A1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1A1C, 16, 2, 32}},
				{NULL, 0},
				{"PP9(Slot6)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1800, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1800, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1800, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1818, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1818, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1810, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1810, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1810, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1810, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1810, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1810, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1810, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x181C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x181C, 16, 2, 32}},
				{NULL, 0},
				{"PP7(Slot7)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1600, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1600, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1600, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1618, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1618, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1610, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1610, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1610, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1610, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1610, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1610, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1610, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x161C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x161C, 16, 2, 32}},
				{NULL, 0},
				{"PP5(Slot8)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1400, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1400, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1400, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1418, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1418, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1410, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1410, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1410, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1410, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1410, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1410, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1410, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x141C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x141C, 16, 2, 32}},
				{NULL, 0},
				{"PP3(Slot9)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1200, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1200, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1200, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1218, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1218, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1210, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1210, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1210, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1210, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1210, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1210, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1210, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x121C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x121C, 16, 2, 32}},
				{NULL, 0},
				{"PP1(Slot10)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1000, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1000, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1000, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1018, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1018, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1010, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1010, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1010, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1010, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1010, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1010, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1010, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x101C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x101C, 16, 2, 32}},
				{NULL, 0},
				{"PP2(Slot13)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1100, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1100, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1100, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1118, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1118, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1110, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1110, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1110, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1110, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1110, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1110, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1110, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x111C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x111C, 16, 2, 32}},
				{NULL, 0},
				{"PP4(Slot14)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1300, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1300, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1300, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1318, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1318, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1310, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1310, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1310, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1310, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1310, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1310, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1310, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x131C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x131C, 16, 2, 32}},
				{NULL, 0},
				{"PP6(Slot15)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1500, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1500, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1500, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1518, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1518, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1510, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1510, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1510, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1510, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1510, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1510, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1510, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x151C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x151C, 16, 2, 32}},
				{NULL, 0},
				{"PP8(Slot16)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1700, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1700, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1700, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1718, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1718, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1710, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1710, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1710, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1710, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1710, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1710, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1710, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x171C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x171C, 16, 2, 32}},
				{NULL, 0},
				{"PP10(Slot17)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1900, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1900, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1900, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1918, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1918, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1910, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1910, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1910, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1910, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1910, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1910, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1910, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x191C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x191C, 16, 2, 32}},
				{NULL, 0},
				{"PP12(Slot18)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1B00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1B00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1B00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1B18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1B18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1B10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1B10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1B10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1B10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1B10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1B10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1B10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1B1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1B1C, 16, 2, 32}},
				{NULL, 0},
				{"PP14(Slot19)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1D00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1D00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1D00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1D18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1D18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1D10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1D10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1D10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1D10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1D10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1D10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1D10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1D1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1D1C, 16, 2, 32}},
				{NULL, 0},
				{"PP16(Slot20)", 0},
					{"PowerDown",				REGMEM_DESC_FLAGS_UINT,		{0x1F00, 0, 1, 32}},
					{"BitErrCntRst",			REGMEM_DESC_FLAGS_UINT,		{0x1F00, 10, 1, 32}},
					{"BitErrCntEn",			REGMEM_DESC_FLAGS_UINT,		{0x1F00, 11, 1, 32}},
					{"BitErrCnt0",				REGMEM_DESC_FLAGS_UINT,		{0x1F18, 0, 16, 32}},
					{"BitErrCnt1",				REGMEM_DESC_FLAGS_UINT,		{0x1F18, 16, 16, 32}},
					{"HardErr0",				REGMEM_DESC_FLAGS_UINT,		{0x1F10, 0, 1, 32}},
					{"HardErr1",				REGMEM_DESC_FLAGS_UINT,		{0x1F10, 1, 1, 32}},
					{"LaneUp0",					REGMEM_DESC_FLAGS_UINT,		{0x1F10, 4, 1, 32}},
					{"LaneUp1",					REGMEM_DESC_FLAGS_UINT,		{0x1F10, 5, 1, 32}},
					{"ChannelUp",				REGMEM_DESC_FLAGS_UINT,		{0x1F10, 12, 1, 32}},
					{"TxLock",					REGMEM_DESC_FLAGS_UINT,		{0x1F10, 13, 1, 32}},
					{"RxSrcRdyN",				REGMEM_DESC_FLAGS_UINT,		{0x1F10, 14, 1, 32}},
					{"Latency",					REGMEM_DESC_FLAGS_UINT,		{0x1F1C, 0, 16, 32}},
					{"CrcPass",					REGMEM_DESC_FLAGS_UINT,		{0x1F1C, 16, 2, 32}},
				{NULL, 0},
			{NULL, 0},
			{"HPSTrigger", 0},
				{"EnabledFADCs", 0},
					{"PP15(Slot3)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 14, 1, 32}},
					{"PP13(Slot4)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 12, 1, 32}},
					{"PP11(Slot5)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 10, 1, 32}},
					{"PP9(Slot6)",				REGMEM_DESC_FLAGS_UINT,		{0x2000, 8, 1, 32}},
					{"PP7(Slot7)",				REGMEM_DESC_FLAGS_UINT,		{0x2000, 6, 1, 32}},
					{"PP5(Slot8)",				REGMEM_DESC_FLAGS_UINT,		{0x2000, 4, 1, 32}},
					{"PP3(Slot9)",				REGMEM_DESC_FLAGS_UINT,		{0x2000, 2, 1, 32}},
					{"PP1(Slot10)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 0, 1, 32}},
					{"PP2(Slot13)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 1, 1, 32}},
					{"PP4(Slot14)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 3, 1, 32}},
					{"PP6(Slot15)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 5, 1, 32}},
					{"PP8(Slot16)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 7, 1, 32}},
					{"PP10(Slot17)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 9, 1, 32}},
					{"PP12(Slot18)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 11, 1, 32}},
					{"PP14(Slot19)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 13, 1, 32}},
					{"PP16(Slot20)",			REGMEM_DESC_FLAGS_UINT,		{0x2000, 15, 1, 32}},
				{NULL, 0},
				{"ClusterPulseCoinTicks",	REGMEM_DESC_FLAGS_UINT,		{0x2004, 0, 3, 32}},
				{"ClusterPulseThreshold",	REGMEM_DESC_FLAGS_UINT,		{0x2008, 0, 13, 32}},
				{"ClusterBusyThreshold",	REGMEM_DESC_FLAGS_UINT,		{0x200C, 0, 12, 32}},
			{NULL, 0}
		};

		pRegEditor->AddSet(regs, sizeof(regs)/sizeof(regs[0]));
	}

	const char *GetModuleName() { return "GTP_HPS"; }
	const char *GetModuleFullName() { return "Global Trigger Processor-HPS"; }
	const char *GetSlotIdentifier() { return strSlotIdentifier.Data(); }

private:
	TString			strSlotIdentifier;
	TGTab				*pGTPTabs;
};

#endif
