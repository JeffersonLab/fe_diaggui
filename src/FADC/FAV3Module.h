#ifndef FAV3Module_H
#define FAV3Module_H

#include "RootHeader.h"
//#include "FAV3_Status.h"
//#include "FAV3_EventHist.h"
#include "ModuleFrame.h"
//#include "FAV3_GTX.h"
// #include "FAV3_TrgHist.h"
// #include "FAV3_SerialScope.h"
#include "FAV3_AdcScope.h"

class FAV3Module:public ModuleFrame {
 public:
	FAV3Module(const TGWindow * p, CrateMsgClient * pClient,
		   unsigned int baseAddr):ModuleFrame(p, pClient, baseAddr) {
		SetupRegisters();

		AddFrame(pTabs =
			 new TGTab(this),
			 new TGLayoutHints(kLHintsBottom | kLHintsRight | kLHintsExpandX |
					   kLHintsExpandY));

		TGCompositeFrame *tFrame;
		//          FAV3_Status *pStatus;

		//          tFrame = pTabs->AddTab("Status");               tFrame->AddFrame(pStatus = new FAV3_Status(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		//          tFrame = pTabs->AddTab("GTX");                  tFrame->AddFrame(new FAV3_GTX(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		//          tFrame = pTabs->AddTab("TrgHist");              tFrame->AddFrame(new FAV3_TrgHist(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		//          tFrame = pTabs->AddTab("VXS Scope");    tFrame->AddFrame(new FAV3_SerialScope(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));
		 tFrame = pTabs->AddTab("Ch Scope");
		 tFrame->AddFrame(new FAV3_AdcScope(tFrame, this),
				  new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));

		//          tFrame = pTabs->AddTab("EventHist");    tFrame->AddFrame(new FAV3_EventHist(tFrame, this), new TGLayoutHints(kLHintsExpandX | kLHintsExpandY));

		 strSlotIdentifier.Form("%d",
					ReadReg32((volatile unsigned int *)(BaseAddr +
									    0x14)) >> 16);
	} void SetupRegisters() {
		static RegMemDesc regs[] = {
			{"AdcParameters", 0},
			{"ChargeScalers", 0},
			{"Acc0", REGMEM_DESC_FLAGS_UINT, {0x0230, 0, 16, 16}},
			{"Acc1", REGMEM_DESC_FLAGS_UINT, {0x0250, 0, 16, 16}},
			{"Acc2", REGMEM_DESC_FLAGS_UINT, {0x0270, 0, 16, 16}},
			{NULL, 0},
			{"AdcThreshold", 0},
			{"tet0", REGMEM_DESC_FLAGS_UINT, {0x0116, 0, 12, 16}},
			{"tet1", REGMEM_DESC_FLAGS_UINT, {0x0118, 0, 12, 16}},
			{"tet2", REGMEM_DESC_FLAGS_UINT, {0x011A, 0, 12, 16}},
			{"tet3", REGMEM_DESC_FLAGS_UINT, {0x011C, 0, 12, 16}},
			{"tet4", REGMEM_DESC_FLAGS_UINT, {0x011E, 0, 12, 16}},
			{"tet5", REGMEM_DESC_FLAGS_UINT, {0x0120, 0, 12, 16}},
			{"tet6", REGMEM_DESC_FLAGS_UINT, {0x0122, 0, 12, 16}},
			{"tet7", REGMEM_DESC_FLAGS_UINT, {0x0124, 0, 12, 16}},
			{"tet8", REGMEM_DESC_FLAGS_UINT, {0x0126, 0, 12, 16}},
			{"tet9", REGMEM_DESC_FLAGS_UINT, {0x0128, 0, 12, 16}},
			{"tet10", REGMEM_DESC_FLAGS_UINT, {0x012A, 0, 12, 16}},
			{"tet11", REGMEM_DESC_FLAGS_UINT, {0x012C, 0, 12, 16}},
			{"tet12", REGMEM_DESC_FLAGS_UINT, {0x012E, 0, 12, 16}},
			{"tet13", REGMEM_DESC_FLAGS_UINT, {0x0130, 0, 12, 16}},
			{"tet14", REGMEM_DESC_FLAGS_UINT, {0x0132, 0, 12, 16}},
			{"tet15", REGMEM_DESC_FLAGS_UINT, {0x0134, 0, 12, 16}},
			{NULL, 0},
			{"PlaybackIgnore", 0},
			{"pb_ignore0", REGMEM_DESC_FLAGS_UINT, {0x0116, 13, 1, 16}},
			{"pb_ignore1", REGMEM_DESC_FLAGS_UINT, {0x0118, 13, 1, 16}},
			{"pb_ignore2", REGMEM_DESC_FLAGS_UINT, {0x011A, 13, 1, 16}},
			{"pb_ignore3", REGMEM_DESC_FLAGS_UINT, {0x011C, 13, 1, 16}},
			{"pb_ignore4", REGMEM_DESC_FLAGS_UINT, {0x011E, 13, 1, 16}},
			{"pb_ignore5", REGMEM_DESC_FLAGS_UINT, {0x0120, 13, 1, 16}},
			{"pb_ignore6", REGMEM_DESC_FLAGS_UINT, {0x0122, 13, 1, 16}},
			{"pb_ignore7", REGMEM_DESC_FLAGS_UINT, {0x0124, 13, 1, 16}},
			{"pb_ignore8", REGMEM_DESC_FLAGS_UINT, {0x0126, 13, 1, 16}},
			{"pb_ignore9", REGMEM_DESC_FLAGS_UINT, {0x0128, 13, 1, 16}},
			{"pb_ignore10", REGMEM_DESC_FLAGS_UINT, {0x012A, 13, 1, 16}},
			{"pb_ignore11", REGMEM_DESC_FLAGS_UINT, {0x012C, 13, 1, 16}},
			{"pb_ignore12", REGMEM_DESC_FLAGS_UINT, {0x012E, 13, 1, 16}},
			{"pb_ignore13", REGMEM_DESC_FLAGS_UINT, {0x0130, 13, 1, 16}},
			{"pb_ignore14", REGMEM_DESC_FLAGS_UINT, {0x0132, 13, 1, 16}},
			{"pb_ignore15", REGMEM_DESC_FLAGS_UINT, {0x0134, 13, 1, 16}},
			{NULL, 0},
			{"AdcThresholdIgnore", 0},
			{"tet_ignore0", REGMEM_DESC_FLAGS_UINT, {0x0116, 15, 1, 16}},
			{"tet_ignore1", REGMEM_DESC_FLAGS_UINT, {0x0118, 15, 1, 16}},
			{"tet_ignore2", REGMEM_DESC_FLAGS_UINT, {0x011A, 15, 1, 16}},
			{"tet_ignore3", REGMEM_DESC_FLAGS_UINT, {0x011C, 15, 1, 16}},
			{"tet_ignore4", REGMEM_DESC_FLAGS_UINT, {0x011E, 15, 1, 16}},
			{"tet_ignore5", REGMEM_DESC_FLAGS_UINT, {0x0120, 15, 1, 16}},
			{"tet_ignore6", REGMEM_DESC_FLAGS_UINT, {0x0122, 15, 1, 16}},
			{"tet_ignore7", REGMEM_DESC_FLAGS_UINT, {0x0124, 15, 1, 16}},
			{"tet_ignore8", REGMEM_DESC_FLAGS_UINT, {0x0126, 15, 1, 16}},
			{"tet_ignore9", REGMEM_DESC_FLAGS_UINT, {0x0128, 15, 1, 16}},
			{"tet_ignore10", REGMEM_DESC_FLAGS_UINT, {0x012A, 15, 1, 16}},
			{"tet_ignore11", REGMEM_DESC_FLAGS_UINT, {0x012C, 15, 1, 16}},
			{"tet_ignore12", REGMEM_DESC_FLAGS_UINT, {0x012E, 15, 1, 16}},
			{"tet_ignore13", REGMEM_DESC_FLAGS_UINT, {0x0130, 15, 1, 16}},
			{"tet_ignore14", REGMEM_DESC_FLAGS_UINT, {0x0132, 15, 1, 16}},
			{"tet_ignore15", REGMEM_DESC_FLAGS_UINT, {0x0134, 15, 1, 16}},
			{NULL, 0},
			{"AdcInvert", 0},
			{"ch0", REGMEM_DESC_FLAGS_UINT, {0x0116, 14, 1, 16}},
			{"ch1", REGMEM_DESC_FLAGS_UINT, {0x0118, 14, 1, 16}},
			{"ch2", REGMEM_DESC_FLAGS_UINT, {0x011A, 14, 1, 16}},
			{"ch3", REGMEM_DESC_FLAGS_UINT, {0x011C, 14, 1, 16}},
			{"ch4", REGMEM_DESC_FLAGS_UINT, {0x011E, 14, 1, 16}},
			{"ch5", REGMEM_DESC_FLAGS_UINT, {0x0120, 14, 1, 16}},
			{"ch6", REGMEM_DESC_FLAGS_UINT, {0x0122, 14, 1, 16}},
			{"ch7", REGMEM_DESC_FLAGS_UINT, {0x0124, 14, 1, 16}},
			{"ch8", REGMEM_DESC_FLAGS_UINT, {0x0126, 14, 1, 16}},
			{"ch9", REGMEM_DESC_FLAGS_UINT, {0x0128, 14, 1, 16}},
			{"ch10", REGMEM_DESC_FLAGS_UINT, {0x012A, 14, 1, 16}},
			{"ch11", REGMEM_DESC_FLAGS_UINT, {0x012C, 14, 1, 16}},
			{"ch12", REGMEM_DESC_FLAGS_UINT, {0x012E, 14, 1, 16}},
			{"ch13", REGMEM_DESC_FLAGS_UINT, {0x0130, 14, 1, 16}},
			{"ch14", REGMEM_DESC_FLAGS_UINT, {0x0132, 14, 1, 16}},
			{"ch15", REGMEM_DESC_FLAGS_UINT, {0x0134, 14, 1, 16}},
			{NULL, 0},
			{"AdcPedestal", 0},
			{"ped0", REGMEM_DESC_FLAGS_UINT, {0x013C, 0, 16, 16}},
			{"ped1", REGMEM_DESC_FLAGS_UINT, {0x013E, 0, 16, 16}},
			{"ped2", REGMEM_DESC_FLAGS_UINT, {0x0130, 0, 16, 16}},
			{"ped3", REGMEM_DESC_FLAGS_UINT, {0x0142, 0, 16, 16}},
			{"ped4", REGMEM_DESC_FLAGS_UINT, {0x0144, 0, 16, 16}},
			{"ped5", REGMEM_DESC_FLAGS_UINT, {0x0146, 0, 16, 16}},
			{"ped6", REGMEM_DESC_FLAGS_UINT, {0x0148, 0, 16, 16}},
			{"ped7", REGMEM_DESC_FLAGS_UINT, {0x014A, 0, 16, 16}},
			{"ped8", REGMEM_DESC_FLAGS_UINT, {0x014C, 0, 16, 16}},
			{"ped9", REGMEM_DESC_FLAGS_UINT, {0x014E, 0, 16, 16}},
			{"ped10", REGMEM_DESC_FLAGS_UINT, {0x0150, 0, 16, 16}},
			{"ped11", REGMEM_DESC_FLAGS_UINT, {0x0152, 0, 16, 16}},
			{"ped12", REGMEM_DESC_FLAGS_UINT, {0x0154, 0, 16, 16}},
			{"ped13", REGMEM_DESC_FLAGS_UINT, {0x0156, 0, 16, 16}},
			{"ped14", REGMEM_DESC_FLAGS_UINT, {0x0158, 0, 16, 16}},
			{"ped15", REGMEM_DESC_FLAGS_UINT, {0x015A, 0, 16, 16}},
			{NULL, 0},
			{"AdcGain", 0},
			{"gain0", REGMEM_DESC_FLAGS_UINT, {0x0164, 0, 16, 16}},
			{"gain1", REGMEM_DESC_FLAGS_UINT, {0x0166, 0, 16, 16}},
			{"gain2", REGMEM_DESC_FLAGS_UINT, {0x0168, 0, 16, 16}},
			{"gain3", REGMEM_DESC_FLAGS_UINT, {0x016A, 0, 16, 16}},
			{"gain4", REGMEM_DESC_FLAGS_UINT, {0x016C, 0, 16, 16}},
			{"gain5", REGMEM_DESC_FLAGS_UINT, {0x016E, 0, 16, 16}},
			{"gain6", REGMEM_DESC_FLAGS_UINT, {0x0170, 0, 16, 16}},
			{"gain7", REGMEM_DESC_FLAGS_UINT, {0x0172, 0, 16, 16}},
			{"gain8", REGMEM_DESC_FLAGS_UINT, {0x0174, 0, 16, 16}},
			{"gain9", REGMEM_DESC_FLAGS_UINT, {0x0176, 0, 16, 16}},
			{"gain10", REGMEM_DESC_FLAGS_UINT, {0x0178, 0, 16, 16}},
			{"gain11", REGMEM_DESC_FLAGS_UINT, {0x017A, 0, 16, 16}},
			{"gain12", REGMEM_DESC_FLAGS_UINT, {0x017C, 0, 16, 16}},
			{"gain13", REGMEM_DESC_FLAGS_UINT, {0x017E, 0, 16, 16}},
			{"gain14", REGMEM_DESC_FLAGS_UINT, {0x0180, 0, 16, 16}},
			{"gain15", REGMEM_DESC_FLAGS_UINT, {0x0182, 0, 16, 16}},
			{NULL, 0},
			{"AdcDelay", 0},
			{"delay0", REGMEM_DESC_FLAGS_UINT, {0x0184, 0, 16, 16}},
			{"delay1", REGMEM_DESC_FLAGS_UINT, {0x0186, 0, 16, 16}},
			{"delay2", REGMEM_DESC_FLAGS_UINT, {0x0188, 0, 16, 16}},
			{"delay3", REGMEM_DESC_FLAGS_UINT, {0x018A, 0, 16, 16}},
			{"delay4", REGMEM_DESC_FLAGS_UINT, {0x018C, 0, 16, 16}},
			{"delay5", REGMEM_DESC_FLAGS_UINT, {0x018E, 0, 16, 16}},
			{"delay6", REGMEM_DESC_FLAGS_UINT, {0x0190, 0, 16, 16}},
			{"delay7", REGMEM_DESC_FLAGS_UINT, {0x0192, 0, 16, 16}},
			{"delay8", REGMEM_DESC_FLAGS_UINT, {0x0194, 0, 16, 16}},
			{"delay9", REGMEM_DESC_FLAGS_UINT, {0x0196, 0, 16, 16}},
			{"delay10", REGMEM_DESC_FLAGS_UINT, {0x0198, 0, 16, 16}},
			{"delay11", REGMEM_DESC_FLAGS_UINT, {0x019A, 0, 16, 16}},
			{"delay12", REGMEM_DESC_FLAGS_UINT, {0x019C, 0, 16, 16}},
			{"delay13", REGMEM_DESC_FLAGS_UINT, {0x019E, 0, 16, 16}},
			{"delay14", REGMEM_DESC_FLAGS_UINT, {0x01A0, 0, 16, 16}},
			{"delay15", REGMEM_DESC_FLAGS_UINT, {0x01A2, 0, 16, 16}},
			{NULL, 0},
			{"ptw", REGMEM_DESC_FLAGS_UINT, {0x011C, 0, 9, 32}},
			{"pl", REGMEM_DESC_FLAGS_UINT, {0x0120, 0, 11, 32}},
			{"nsb", REGMEM_DESC_FLAGS_UINT, {0x0124, 0, 9, 32}},
			{"nsa", REGMEM_DESC_FLAGS_UINT, {0x0128, 0, 9, 32}},
			{NULL, 0},
			{"Scalers", 0},
			{"enable", REGMEM_DESC_FLAGS_UINT, {0x00E0, 0, 1, 32}},
			{"latch", REGMEM_DESC_FLAGS_UINT, {0x00E0, 1, 1, 32}},
			{"reset", REGMEM_DESC_FLAGS_UINT, {0x00E0, 2, 1, 32}},
			{"trig_scal", REGMEM_DESC_FLAGS_UINT, {0x0030, 0, 32, 32}},
			{"ev_count", REGMEM_DESC_FLAGS_UINT, {0x0034, 0, 32, 32}},
			{"blk_count", REGMEM_DESC_FLAGS_UINT, {0x0038, 0, 32, 32}},
			{"blk_fifo_count", REGMEM_DESC_FLAGS_UINT, {0x003C, 0, 32, 32}},
			{"blk_wrdcnt_fifo", REGMEM_DESC_FLAGS_UINT, {0x0040, 0, 32, 32}},
			{"internal_trig_scal", REGMEM_DESC_FLAGS_UINT, {0x0044, 0, 32, 32}},
			{"ram_word_count", REGMEM_DESC_FLAGS_UINT, {0x0048, 0, 32, 32}},
			{"berr_module_scal", REGMEM_DESC_FLAGS_UINT, {0x00A0, 0, 32, 32}},
			{"berr_crate_scal", REGMEM_DESC_FLAGS_UINT, {0x00A4, 0, 32, 32}},
			{"proc_words_scal", REGMEM_DESC_FLAGS_UINT, {0x00A8, 0, 32, 32}},
			{"aux_scal2", REGMEM_DESC_FLAGS_UINT, {0x00AC, 0, 32, 32}},
			{"header_scal", REGMEM_DESC_FLAGS_UINT, {0x00B0, 0, 32, 32}},
			{"trig2_scal", REGMEM_DESC_FLAGS_UINT, {0x00B4, 0, 32, 32}},
			{"trailer_scal", REGMEM_DESC_FLAGS_UINT, {0x00B8, 0, 32, 32}},
			{"syncreset_scal", REGMEM_DESC_FLAGS_UINT, {0x00BC, 0, 32, 32}},
			{"scaler_ctrl", REGMEM_DESC_FLAGS_UINT, {0x00E0, 0, 32, 32}},
			{"scaler_interval", REGMEM_DESC_FLAGS_UINT, {0x00F0, 0, 32, 32}},
			{"time_count", REGMEM_DESC_FLAGS_UINT, {0x0340, 0, 32, 32}},
			{"clock250count", REGMEM_DESC_FLAGS_UINT, {0x0404, 0, 32, 32}},
			{"syncp0count", REGMEM_DESC_FLAGS_UINT, {0x0408, 0, 32, 32}},
			{"trig1p0count", REGMEM_DESC_FLAGS_UINT, {0x040C, 0, 32, 32}},
			{"trig2p0count", REGMEM_DESC_FLAGS_UINT, {0x0410, 0, 32, 32}},
			{"scaler0", REGMEM_DESC_FLAGS_UINT, {0x0300, 0, 32, 32}},
			{"scaler1", REGMEM_DESC_FLAGS_UINT, {0x0304, 0, 32, 32}},
			{"scaler2", REGMEM_DESC_FLAGS_UINT, {0x0308, 0, 32, 32}},
			{"scaler3", REGMEM_DESC_FLAGS_UINT, {0x030C, 0, 32, 32}},
			{"scaler4", REGMEM_DESC_FLAGS_UINT, {0x0310, 0, 32, 32}},
			{"scaler5", REGMEM_DESC_FLAGS_UINT, {0x0314, 0, 32, 32}},
			{"scaler6", REGMEM_DESC_FLAGS_UINT, {0x0318, 0, 32, 32}},
			{"scaler7", REGMEM_DESC_FLAGS_UINT, {0x031C, 0, 32, 32}},
			{"scaler8", REGMEM_DESC_FLAGS_UINT, {0x0320, 0, 32, 32}},
			{"scaler9", REGMEM_DESC_FLAGS_UINT, {0x0324, 0, 32, 32}},
			{"scaler10", REGMEM_DESC_FLAGS_UINT, {0x0328, 0, 32, 32}},
			{"scaler11", REGMEM_DESC_FLAGS_UINT, {0x032C, 0, 32, 32}},
			{"scaler12", REGMEM_DESC_FLAGS_UINT, {0x0330, 0, 32, 32}},
			{"scaler13", REGMEM_DESC_FLAGS_UINT, {0x0334, 0, 32, 32}},
			{"scaler14", REGMEM_DESC_FLAGS_UINT, {0x0338, 0, 32, 32}},
			{"scaler15", REGMEM_DESC_FLAGS_UINT, {0x033C, 0, 32, 32}},
			{NULL, 0},
			{"CTP(SWA:lanes2-3)", 0},
			{"Drp", 0},
			{"WrEn", REGMEM_DESC_FLAGS_UINT, {0x050C, 24, 1, 32}},
			{"DenTile0", REGMEM_DESC_FLAGS_UINT, {0x050C, 25, 1, 32}},
			{"Addr", REGMEM_DESC_FLAGS_HEX, {0x050C, 16, 7, 32}},
			{"WrData", REGMEM_DESC_FLAGS_HEX, {0x050C, 0, 16, 32}},
			{"RdData", REGMEM_DESC_FLAGS_UINT, {0x0510, 0, 16, 32}},
			{"RdDataValid", REGMEM_DESC_FLAGS_UINT, {0x0510, 16, 1, 32}},
			{NULL, 0},
			{"Settings", 0},
			{"Loopback", REGMEM_DESC_FLAGS_STRING, {0x0500, 2, 3, 32},
			 {5, {"DISABLED", "NEARPCS", "NEARPMA", "FARPMA", "FARPCS"},
			  {0, 1, 2, 4, 6}}},
			{"RxEnPrbs", REGMEM_DESC_FLAGS_STRING, {0x0500, 5, 2, 32},
			 {4, {"DISABLED", "PRBS7", "PRBS23", "PRBS31"}, {0, 1, 2, 3}}},
			{"TxEnPrbs", REGMEM_DESC_FLAGS_STRING, {0x0500, 7, 2, 32},
			 {4, {"DISABLED", "PRBS7", "PRBS23", "PRBS31"}, {0, 1, 2, 3}}},
			{"RxEqMix0", REGMEM_DESC_FLAGS_STRING, {0x0504, 0, 2, 32},
			 {4, {"LARGE", "SMALL", "MEDIUM", "BYPASS"}, {0, 1, 2, 3}}},
			{"TxPreEmp0", REGMEM_DESC_FLAGS_STRING, {0x0504, 2, 4, 32},
			 {8, {"0%", "8%", "17%", "25%", "33%", "42%", "50%", "58%"},
			  {0, 1, 2, 3, 4, 5, 6, 7}}},
			{"TxBufDiff0", REGMEM_DESC_FLAGS_UINT, {0x0504, 6, 3, 32}},
			{"TxDiffCtrl0", REGMEM_DESC_FLAGS_STRING, {0x0504, 9, 3, 32},
			 {8,
			  {"500mV", "700mV", "800mV", "900mV", "1000mV", "1100mV", "1200mV",
			   "1300mV"},
			  {0, 1, 2, 3, 4, 5, 6, 7}}},
			{"RxEqMix1", REGMEM_DESC_FLAGS_STRING, {0x0504, 16, 2, 32},
			 {4, {"LARGE", "SMALL", "MEDIUM", "BYPASS"}, {0, 1, 2, 3}}},
			{"TxPreEmp1", REGMEM_DESC_FLAGS_STRING, {0x0504, 18, 4, 32},
			 {8, {"0%", "8%", "17%", "25%", "33%", "42%", "50%", "58%"},
			  {0, 1, 2, 3, 4, 5, 6, 7}}},
			{"TxBufDiff1", REGMEM_DESC_FLAGS_UINT, {0x0504, 22, 3, 32}},
			{"TxDiffCtrl1", REGMEM_DESC_FLAGS_STRING, {0x0504, 25, 3, 32},
			 {8,
			  {"500mV", "700mV", "800mV", "900mV", "1000mV", "1100mV", "1200mV",
			   "1300mV"},
			  {0, 1, 2, 3, 4, 5, 6, 7}}},
			{NULL, 0},
			{"PowerDown", REGMEM_DESC_FLAGS_UINT, {0x0500, 0, 1, 32}},
			{"GTReset", REGMEM_DESC_FLAGS_UINT, {0x0500, 1, 1, 32}},
			{"LinkReset", REGMEM_DESC_FLAGS_UINT, {0x0500, 9, 1, 32}},
			{"BitErrCntRst", REGMEM_DESC_FLAGS_UINT, {0x0500, 10, 1, 32}},
			{"BitErrCntEn", REGMEM_DESC_FLAGS_UINT, {0x0500, 11, 1, 32}},
			{"BitErrCnt0", REGMEM_DESC_FLAGS_UINT, {0x0514, 0, 16, 32}},
			{"BitErrCnt1", REGMEM_DESC_FLAGS_UINT, {0x0514, 16, 16, 32}},
			{"HardErr0", REGMEM_DESC_FLAGS_UINT, {0x0508, 0, 1, 32}},
			{"HardErr1", REGMEM_DESC_FLAGS_UINT, {0x0508, 1, 1, 32}},
			{"LaneUp0", REGMEM_DESC_FLAGS_UINT, {0x0508, 4, 1, 32}},
			{"LaneUp1", REGMEM_DESC_FLAGS_UINT, {0x0508, 5, 1, 32}},
			{"RxPolarity0", REGMEM_DESC_FLAGS_UINT, {0x0508, 8, 1, 32}},
			{"RxPolarity1", REGMEM_DESC_FLAGS_UINT, {0x0508, 9, 1, 32}},
			{"ChannelUp", REGMEM_DESC_FLAGS_UINT, {0x0508, 12, 1, 32}},
			{"TxLock", REGMEM_DESC_FLAGS_UINT, {0x0508, 13, 1, 32}},
			{"RxSrcRdyN", REGMEM_DESC_FLAGS_UINT, {0x0508, 14, 1, 32}},
			{NULL, 0},
			{"CSR", 0},
			{"ClearModule", REGMEM_DESC_FLAGS_HEX, {0x0004, 21, 1, 32}},
			{"SyncReset", REGMEM_DESC_FLAGS_HEX, {0x0004, 28, 1, 32}},
			{"Trigger1", REGMEM_DESC_FLAGS_HEX, {0x0004, 29, 1, 32}},
			{"SoftReset", REGMEM_DESC_FLAGS_HEX, {0x0004, 30, 1, 32}},
			{"HardReset", REGMEM_DESC_FLAGS_HEX, {0x0004, 31, 1, 32}},
			{NULL, 0},
			{"CTRL1", 0},
			{"ClkSource", REGMEM_DESC_FLAGS_STRING, {0x0008, 0, 2, 32},
			 {4, {"INT", "FP", "P0", "P0"}, {0, 1, 2, 3}}},
			{"IntClkEnable", REGMEM_DESC_FLAGS_HEX, {0x0008, 3, 1, 32}},
			{"TrigSource", REGMEM_DESC_FLAGS_STRING, {0x0008, 4, 3, 32},
			 {7,
			  {"FP-ASYNC", "FP-SYNC", "P0-ASYNC", "P0-SYNC", "SW-T2+dT1", "SW-T1",
			   "INT"},
			  {0, 1, 2, 3, 5, 6, 7}}},
			{"TrigSoftEnable", REGMEM_DESC_FLAGS_HEX, {0x0008, 7, 1, 32}},
			{"SyncSource", REGMEM_DESC_FLAGS_STRING, {0x0008, 8, 3, 32},
			 {5, {"FP-ASYNC", "FP-SYNC", "P0-ASYNC", "P0-SYNC", "SW"},
			  {0, 1, 2, 3, 6}}},
			{"SyncSoftEnable", REGMEM_DESC_FLAGS_HEX, {0x0008, 11, 1, 32}},
			{"LiveTrgOutEnable", REGMEM_DESC_FLAGS_HEX, {0x0008, 12, 1, 32}},
			{"TrgOutP0Enable", REGMEM_DESC_FLAGS_HEX, {0x0008, 13, 1, 32}},
			{"TrgOutFPEnable", REGMEM_DESC_FLAGS_HEX, {0x0008, 14, 1, 32}},
			{NULL, 0},
			{"CTRL2", 0},
			{"Go", REGMEM_DESC_FLAGS_HEX, {0x000C, 0, 1, 32}},
			{"TrigEnable", REGMEM_DESC_FLAGS_HEX, {0x000C, 1, 1, 32}},
			{"SyncEnable", REGMEM_DESC_FLAGS_HEX, {0x000C, 2, 1, 32}},
			{NULL, 0},
			{"Reset", 0},
			{"HardResetCtrl", REGMEM_DESC_FLAGS_HEX, {0x0002C, 0, 1, 32}},
			{"HardResetAdc", REGMEM_DESC_FLAGS_HEX, {0x0002C, 1, 1, 32}},
			{"SoftResetCtrl", REGMEM_DESC_FLAGS_HEX, {0x0002C, 4, 1, 32}},
			{"SoftResetAdc", REGMEM_DESC_FLAGS_HEX, {0x0002C, 5, 1, 32}},
			{"ResetAdcFifo", REGMEM_DESC_FLAGS_HEX, {0x0002C, 8, 1, 32}},
			{"ResetHitsumFifo", REGMEM_DESC_FLAGS_HEX, {0x0002C, 10, 1, 32}},
			{"ResetDac", REGMEM_DESC_FLAGS_HEX, {0x0002C, 11, 1, 32}},
			{"ResetRam", REGMEM_DESC_FLAGS_HEX, {0x0002C, 12, 1, 32}},
			{NULL, 0},
			{"Misc", 0},
			{"version", REGMEM_DESC_FLAGS_HEX, {0x0000, 0, 32, 32}},
			{"csr", REGMEM_DESC_FLAGS_HEX, {0x0004, 0, 32, 32}},
			{"ctrl1", REGMEM_DESC_FLAGS_HEX, {0x0008, 0, 32, 32}},
			{"ctrl2", REGMEM_DESC_FLAGS_HEX, {0x000C, 0, 32, 32}},
			{"blk_level", REGMEM_DESC_FLAGS_UINT, {0x0010, 0, 32, 32}},
			{"itrig_cfg", REGMEM_DESC_FLAGS_HEX, {0x0028, 0, 32, 32}},
			{"reset", REGMEM_DESC_FLAGS_HEX, {0x002C, 0, 32, 32}},
			{"dataflow_status", REGMEM_DESC_FLAGS_HEX, {0x004C, 0, 32, 32}},
			{"status0", REGMEM_DESC_FLAGS_HEX, {0x0070, 0, 32, 32}},
			{"status1", REGMEM_DESC_FLAGS_HEX, {0x0074, 0, 32, 32}},
			{"status2", REGMEM_DESC_FLAGS_HEX, {0x0078, 0, 32, 32}},
			{"status3", REGMEM_DESC_FLAGS_HEX, {0x007C, 0, 32, 32}},
			{"busy_level", REGMEM_DESC_FLAGS_UINT, {0x00C0, 0, 32, 32}},
			{"serial0", REGMEM_DESC_FLAGS_HEX, {0x00E4, 0, 32, 32}},
			{"serial1", REGMEM_DESC_FLAGS_HEX, {0x00E8, 0, 32, 32}},
			{"serial2", REGMEM_DESC_FLAGS_HEX, {0x00EC, 0, 32, 32}},
			{"adc_status0", REGMEM_DESC_FLAGS_HEX, {0x0100, 0, 32, 32}},
			{"adc_status1", REGMEM_DESC_FLAGS_HEX, {0x0104, 0, 32, 32}},
			{"adc_status2", REGMEM_DESC_FLAGS_HEX, {0x0108, 0, 32, 32}},
			{"adc_config0", REGMEM_DESC_FLAGS_HEX, {0x010C, 0, 32, 32}},
			{"adc_config1", REGMEM_DESC_FLAGS_HEX, {0x0110, 0, 32, 32}},
			{"adc_config2", REGMEM_DESC_FLAGS_HEX, {0x0114, 0, 32, 32}},
			{"adc_config3", REGMEM_DESC_FLAGS_HEX, {0x0118, 0, 32, 32}},
			{"ptw_last_adr", REGMEM_DESC_FLAGS_UINT, {0x014C, 0, 32, 32}},
			{"ptw_max_buf", REGMEM_DESC_FLAGS_UINT, {0x0150, 0, 32, 32}},
			{"adc_test_data", REGMEM_DESC_FLAGS_HEX, {0x0154, 0, 32, 32}},
			{"mgt_ctrl", REGMEM_DESC_FLAGS_HEX, {0x00D4, 0, 32, 32}},
			{"mgt_status", REGMEM_DESC_FLAGS_HEX, {0x00D0, 0, 32, 32}},
			{NULL, 0}
		};
		pRegEditor->AddSet(regs, sizeof(regs) / sizeof(regs[0]));
	}

	const char *GetModuleName() {
		return "FAV3";
	}
	const char *GetModuleFullName() {
		return "Flash ADC V3 250Msps";
	}
	const char *GetSlotIdentifier() {
		return strSlotIdentifier.Data();
	}

 private:
	TString strSlotIdentifier;
	TGTab *pTabs;
};

#endif
